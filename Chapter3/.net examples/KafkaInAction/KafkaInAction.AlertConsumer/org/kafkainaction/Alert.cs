// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.11.3
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace org.kafkainaction
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("avrogen", "1.11.3")]
	public partial class Alert : global::Avro.Specific.ISpecificRecord
	{
		public static global::Avro.Schema _SCHEMA = global::Avro.Schema.Parse(@"{""type"":""record"",""name"":""Alert"",""namespace"":""org.kafkainaction"",""fields"":[{""name"":""sensor_id"",""doc"":""The unique id that identifies the sensor"",""type"":""long""},{""name"":""time"",""doc"":""Time the alert was generated as UTC milliseconds from the epoch"",""type"":""long""},{""name"":""status"",""doc"":""The allowed values that our sensors will use to emit current status"",""type"":{""type"":""enum"",""name"":""AlertStatus"",""namespace"":""org.kafkainaction"",""symbols"":[""Critical"",""Major"",""Minor"",""Warning""]}}]}");
		/// <summary>
		/// The unique id that identifies the sensor
		/// </summary>
		private long _sensor_id;
		/// <summary>
		/// Time the alert was generated as UTC milliseconds from the epoch
		/// </summary>
		private long _time;
		/// <summary>
		/// The allowed values that our sensors will use to emit current status
		/// </summary>
		private org.kafkainaction.AlertStatus _status;
		public virtual global::Avro.Schema Schema
		{
			get
			{
				return Alert._SCHEMA;
			}
		}
		/// <summary>
		/// The unique id that identifies the sensor
		/// </summary>
		public long sensor_id
		{
			get
			{
				return this._sensor_id;
			}
			set
			{
				this._sensor_id = value;
			}
		}
		/// <summary>
		/// Time the alert was generated as UTC milliseconds from the epoch
		/// </summary>
		public long time
		{
			get
			{
				return this._time;
			}
			set
			{
				this._time = value;
			}
		}
		/// <summary>
		/// The allowed values that our sensors will use to emit current status
		/// </summary>
		public org.kafkainaction.AlertStatus status
		{
			get
			{
				return this._status;
			}
			set
			{
				this._status = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.sensor_id;
			case 1: return this.time;
			case 2: return this.status;
			default: throw new global::Avro.AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.sensor_id = (System.Int64)fieldValue; break;
			case 1: this.time = (System.Int64)fieldValue; break;
			case 2: this.status = (org.kafkainaction.AlertStatus)fieldValue; break;
			default: throw new global::Avro.AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
